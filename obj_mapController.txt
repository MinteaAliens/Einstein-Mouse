|| C R E A T E ||

/// @description create 32x32 tiles so you can handle them
//store their ID's in a separate array

randomise();

enum MAP_MODE{
	CREATION,
	MOUSE,
	PLAYER_PATH
}

global.MODE = MAP_MODE.MOUSE;

var i;
var j;
/*
for (i = 0; i < 32; i++){
	for (j = 0; j < 32; j++){
		var pass = false;
		tile_id = instance_create_depth(i*32, j*32, 0, obj_tile);
		tile_id_map[i, j] = tile_id; //keep track of ids
		//tile_player_path[i, j] = -1; //keep track of player path
		global.tile_path[i, j] = "0"; //keep track of path
		if (i == 16 && j == 8){
			pass = true;
		}
		with(tile_id){
			passable = pass;
			controller_id = id;
			row = j*32;
			column = i*32;
		}
	}
}*/

for (i = 0; i < 32; i++){
	for (j = 0; j < 32; j++){
		if (collision_point((i*42) + 32, (j*64) + 32, obj_wall, false, true)){
			global.tile_path[i , j] = "0";
		}
		else{
			global.tile_path[i, j] = "*";
		}
	}
}

mouse = instance_create_depth(96, 96, -100, obj_mouse);
global.title_path[1,1] = "s";
with (mouse){
	controller_id = id;
}
var house_placed = false;
while (!house_placed){
	var ex = (irandom(31)*64)-32;
	var why = (irandom(31)*64)-32;
	if (point_distance(mouse.x, mouse.y, ex, why) > 256 && 
	collision_point(ex, why, obj_maze, false, true)){
		house_placed = true;
		var destination = instance_create_depth(ex, why, -100, obj_house);
		with (destination){
			controller_id = id;
		}
		global.tile_path[(ex+32)/64, (why+32)/64] = "d";
	}
}

//instance_create_depth(x,y, 0, obj_test);

---
